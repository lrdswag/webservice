security:
    encoders:

        App\Entity\User:
            algorithm: argon2i

        App\ApiPlatform\Test\User:
            algorithm: argon2i
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
        # used to reload user from session & other features (e.g. switch_user)
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        register:
           pattern: ^/register
           stateless: true
           anonymous: true

        main:
            anonymous: true
            stateless: true
            provider: app_user_provider
            json_login:
                check_path: api_login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure

            logout:
                path: app_logout
            guard:
                authenticators:
                    - lexik_jwt_authentication.jwt_token_authenticator
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
    #    - { path: ^/token/refresh, roles: IS_AUTHENTICATED_FULLY }
    #     - { path: ^/profile, roles: ROLE_USER }
    #     - { path: ^/admin, roles: ROLE_ADMIN }
