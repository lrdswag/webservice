# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

"A node, according to the Relay specification."
interface Node {
    "The id of this node."
    id: ID!
}

type Mutation {
    "Creates a ScheduledShift."
    createScheduledShift(input: createScheduledShiftInput!): createScheduledShiftPayload
    "Creates a ShiftComments."
    createShiftComments(input: createShiftCommentsInput!): createShiftCommentsPayload
    "Creates a User."
    createUser(input: createUserInput!): createUserPayload
    "Deletes a ScheduledShift."
    deleteScheduledShift(input: deleteScheduledShiftInput!): deleteScheduledShiftPayload
    "Deletes a ShiftComments."
    deleteShiftComments(input: deleteShiftCommentsInput!): deleteShiftCommentsPayload
    "Deletes a User."
    deleteUser(input: deleteUserInput!): deleteUserPayload
    "Updates a ScheduledShift."
    updateScheduledShift(input: updateScheduledShiftInput!): updateScheduledShiftPayload
    "Updates a ShiftComments."
    updateShiftComments(input: updateShiftCommentsInput!): updateShiftCommentsPayload
    "Updates a User."
    updateUser(input: updateUserInput!): updateUserPayload
}

type Query {
    node(id: ID!): Node
    scheduledShift(id: ID!): ScheduledShift
    scheduledShifts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ScheduledShiftConnection
    shiftComments(id: ID!): ShiftComments
    user(id: ID!): User
    users(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): UserConnection
}

"ScheduledShift"
type ScheduledShift implements Node {
    ShiftStatus: Iterable!
    comments(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ShiftCommentsConnection
    end: String!
    id: ID!
    onDuty: User
    start: String!
}

"Connection for ScheduledShift."
type ScheduledShiftConnection {
    edges: [ScheduledShiftEdge]
    pageInfo: ScheduledShiftPageInfo!
    totalCount: Int!
}

"Edge of ScheduledShift."
type ScheduledShiftEdge {
    cursor: String!
    node: ScheduledShift
}

"Information about the current page."
type ScheduledShiftPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

"ShiftComments"
type ShiftComments implements Node {
    authoredBy: User
    comment: String!
    dateOfComment: String!
    id: ID!
    shift: ScheduledShift
}

"Connection for ShiftComments."
type ShiftCommentsConnection {
    edges: [ShiftCommentsEdge]
    pageInfo: ShiftCommentsPageInfo!
    totalCount: Int!
}

"Edge of ShiftComments."
type ShiftCommentsEdge {
    cursor: String!
    node: ShiftComments
}

"Information about the current page."
type ShiftCommentsPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

"User"
type User implements Node {
    companyName: String
    contactNumber: String!
    email: String!
    firstName: String!
    id: ID!
    lastName: String!
    profilePicture: String
    roles: Iterable
    shifts(
        "Returns the elements in the list that come after the specified cursor."
        after: String,
        "Returns the elements in the list that come before the specified cursor."
        before: String,
        "Returns the first n elements from the list."
        first: Int,
        "Returns the last n elements from the list."
        last: Int
    ): ScheduledShiftConnection
    wagePerHour: String
}

"Connection for User."
type UserConnection {
    edges: [UserEdge]
    pageInfo: UserPageInfo!
    totalCount: Int!
}

"Edge of User."
type UserEdge {
    cursor: String!
    node: User
}

"Information about the current page."
type UserPageInfo {
    endCursor: String
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
    startCursor: String
}

"ScheduledShift"
type createScheduledShiftPayload {
    clientMutationId: String
    scheduledShift: ScheduledShift
}

"ShiftComments"
type createShiftCommentsPayload {
    clientMutationId: String
    shiftComments: ShiftComments
}

"User"
type createUserPayload {
    clientMutationId: String
    user: User
}

"ScheduledShift"
type deleteScheduledShiftPayload {
    clientMutationId: String
    scheduledShift: ScheduledShift
}

"ShiftComments"
type deleteShiftCommentsPayload {
    clientMutationId: String
    shiftComments: ShiftComments
}

"User"
type deleteUserPayload {
    clientMutationId: String
    user: User
}

"ScheduledShift"
type updateScheduledShiftPayload {
    clientMutationId: String
    scheduledShift: ScheduledShift
}

"ShiftComments"
type updateShiftCommentsPayload {
    clientMutationId: String
    shiftComments: ShiftComments
}

"User"
type updateUserPayload {
    clientMutationId: String
    user: User
}

"ScheduledShift"
input createScheduledShiftInput {
    ShiftStatus: Iterable!
    clientMutationId: String
    end: String!
    onDuty: String
    start: String!
}

"ShiftComments"
input createShiftCommentsInput {
    authoredBy: String
    clientMutationId: String
    comment: String!
    dateOfComment: String!
    shift: String
}

"User"
input createUserInput {
    clientMutationId: String
    companyName: String
    contactNumber: String!
    email: String!
    firstName: String!
    lastName: String!
    password: String!
    profilePicture: String
    roles: Iterable
    wagePerHour: String
}

"ScheduledShift"
input deleteScheduledShiftInput {
    clientMutationId: String
    id: ID!
}

"ShiftComments"
input deleteShiftCommentsInput {
    clientMutationId: String
    id: ID!
}

"User"
input deleteUserInput {
    clientMutationId: String
    id: ID!
}

"ScheduledShift"
input updateScheduledShiftInput {
    ShiftStatus: Iterable
    clientMutationId: String
    end: String
    id: ID!
    onDuty: String
    start: String
}

"ShiftComments"
input updateShiftCommentsInput {
    authoredBy: String
    clientMutationId: String
    comment: String
    dateOfComment: String
    id: ID!
    shift: String
}

"User"
input updateUserInput {
    clientMutationId: String
    companyName: String
    contactNumber: String
    email: String
    firstName: String
    id: ID!
    lastName: String
    password: String
    profilePicture: String
    roles: Iterable
    wagePerHour: String
}


"The `Iterable` scalar type represents an array or a Traversable with any kind of data."
scalar Iterable
